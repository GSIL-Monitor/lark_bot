"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const koa_router_1 = __importDefault(require("koa-router"));
const require_dir_1 = __importDefault(require("require-dir"));
var HttpMethod;
(function (HttpMethod) {
    HttpMethod[HttpMethod["HEAD"] = 0] = "HEAD";
    HttpMethod[HttpMethod["OPTIONS"] = 1] = "OPTIONS";
    HttpMethod[HttpMethod["GET"] = 2] = "GET";
    HttpMethod[HttpMethod["PUT"] = 3] = "PUT";
    HttpMethod[HttpMethod["PATCH"] = 4] = "PATCH";
    HttpMethod[HttpMethod["POST"] = 5] = "POST";
    HttpMethod[HttpMethod["DELETE"] = 6] = "DELETE";
    HttpMethod[HttpMethod["ALL"] = 7] = "ALL";
})(HttpMethod = exports.HttpMethod || (exports.HttpMethod = {}));
const router = new koa_router_1.default();
function controller(path = '') {
    return (target, key, descriptor) => {
        if (!target.prototype.router) {
            target.prototype.router = new koa_router_1.default();
        }
        router.use(path, target.prototype.router.routes());
        router.use(path, target.prototype.router.allowedMethods());
    };
}
exports.controller = controller;
function route(path, method, ...middleware) {
    return (target, key, descriptor) => {
        if (!target.router) {
            target.router = new koa_router_1.default();
        }
        switch (method) {
            case HttpMethod.HEAD:
                target.router.head(path, ...middleware, descriptor.value);
                break;
            case HttpMethod.OPTIONS:
                target.router.options(path, ...middleware, descriptor.value);
                break;
            case HttpMethod.GET:
                target.router.get(path, ...middleware, descriptor.value);
                break;
            case HttpMethod.PUT:
                target.router.put(path, ...middleware, descriptor.value);
                break;
            case HttpMethod.PATCH:
                target.router.patch(path, ...middleware, descriptor.value);
                break;
            case HttpMethod.POST:
                target.router.post(path, ...middleware, descriptor.value);
                break;
            case HttpMethod.DELETE:
                target.router.del(path, ...middleware, descriptor.value);
                break;
            default:
                target.router.all(path, ...middleware, descriptor.value);
                break;
        }
    };
}
exports.route = route;
function loadControllers(controllerDir) {
    require_dir_1.default(controllerDir);
    return router;
}
exports.loadControllers = loadControllers;
