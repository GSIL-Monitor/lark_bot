import { Middleware } from 'koa'
import Router from 'koa-router'
import RequireDir from 'require-dir'

export enum HttpMethod {
  HEAD,
  OPTIONS,
  GET,
  PUT,
  PATCH,
  POST,
  DELETE,
  ALL,
}

const router = new Router()

export function controller(path: string = '') {
  return (target: any, key?: string | symbol, descriptor?: any): void => {
    if (!target.prototype.router) {
      target.prototype.router = new Router()
    }

    router.use(path, target.prototype.router.routes())
    router.use(path, target.prototype.router.allowedMethods())
  }
}

export function route(
  path: string,
  method?: HttpMethod,
  ...middleware: Array<Middleware>
) {
  return (target: any, key?: string | symbol, descriptor?: any): void => {
    if (!target.router) {
      target.router = new Router()
    }

    switch (method) {
      case HttpMethod.HEAD:
        target.router.head(path, ...middleware, descriptor.value)
        break
      case HttpMethod.OPTIONS:
        target.router.options(path, ...middleware, descriptor.value)
        break
      case HttpMethod.GET:
        target.router.get(path, ...middleware, descriptor.value)
        break
      case HttpMethod.PUT:
        target.router.put(path, ...middleware, descriptor.value)
        break
      case HttpMethod.PATCH:
        target.router.patch(path, ...middleware, descriptor.value)
        break
      case HttpMethod.POST:
        target.router.post(path, ...middleware, descriptor.value)
        break
      case HttpMethod.DELETE:
        target.router.del(path, ...middleware, descriptor.value)
        break
      default:
        target.router.all(path, ...middleware, descriptor.value)
        break
    }
  }
}

export function loadControllers(controllerDir: string) {
  RequireDir(controllerDir)
  return router
}
